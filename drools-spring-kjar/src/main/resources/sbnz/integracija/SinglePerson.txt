package sbnz.integracija;

import java.util.ArrayList;
import java.util.List;
import sbnz.integracija.example.model.Pet;
import sbnz.integracija.example.model.User;
import sbnz.integracija.example.model.Helper;
import sbnz.integracija.example.model.SinglPerson;

global Pet perfectPet;

declare PetCompatibility
	petId: long
end

declare PetStress
	petId: long
end

declare PetMistery
	petId: long
end

declare PetMeditation
	petId: long
end

declare PetExtroversion
	petId: long
end

declare PetIntroversion
	petId: long
end

declare PetPatience
	petId: long
end

declare PetPersistance
	petId: long
end

declare PetProtection
	petId: long
	levelProtection: int
end

declare PetActivity
	petId: long
	//levelProtection: int
end


declare PetTime
	petId: long
	//levelProtection: int
end

declare PetPrice
	petId: long
	//levelProtection: int
end
declare PetPlaceForLiving
	petId: long
	//levelProtection: int
end

rule "Perfect pet"
	agenda-group "perfect-pet"
	//salience (1 * $smoking + 1 * $alchocol + 1 * $education + 1 *$trait + 1 * $income + 1 * $religion + $rating + 2*$previousExperience)
	when
		//PetCompatibility( $petId : petId ),  ovo dodje kasnije
		PetProtection($petId : petId,$petId == petId, $levelProtection : levelProtection )
		PetStress(petId == $petId )
		PetMistery(petId == $petId )
		PetExtroversion(petId == $petId )
		PetMeditation(petId == $petId )
		PetIntroversion(petId == $petId )
		PetPatience(petId == $petId )
		PetPersistance(petId == $petId )
		//PetActivity(petId == $petId )
		$u: SinglPerson( id == id, $alergicOn : alergicOn, $afraidOf: afraidOf)
		$perfectPet: Pet( id == $petId, $type : type )
		
		Number($value: intValue < 1 ) from accumulate(
        	String($t:this, this == $type) from $alergicOn,
        	count($t)
        )
         Number($valuee: intValue < 1 ) from accumulate(
        	String($t:this, this == $type) from $afraidOf,
        	count($t)
        )
        
		$helper: Helper()
		//$ur: PartnerRequirements( userId == loggedInUserId, active == true ) ovo mozda uopste ne dodje
	then
		$helper.setText("kraj");
		System.out.println("Previous experience score ");
		drools.getKnowledgeRuntime().setGlobal("perfectPet", $perfectPet);
		update($helper);
		//modify($ur){setActive(false);};
	
end;

rule "Compatibility - same level protection"
	agenda-group "prepare-perfect-pet"
	//salience 1
	when
		$u: SinglPerson( id == id, $levelOfProtection: levelOfProtection )
		$pet: Pet($petId : id, levelOfProtection == $levelOfProtection )
		//$compatiblePet: PetCompatibility( petId == $petId )
		not ( PetProtection(petId == $petId) )
		$helper: Helper()
	then
		$helper.setText("1");
		System.out.println("Added score for same level protection compatibility for pet: " + $petId);
		insert(new PetProtection($petId, 5));
		update($helper);
end;

rule "Same stress level" //npr stresan posao
	agenda-group "user-personality"
	//salience 1
	when
		$u: SinglPerson( id == id, $levelOfStressOnJob: levelOfStressOnJob )
		$pet: Pet($petId : id, levelOfStressOnJob == $levelOfStressOnJob )
		//$compatiblePet: PetCompatibility( petId == $petId )
		not ( PetStress(petId == $petId) )
		$helper: Helper()
	then
		$helper.setText("2");
		System.out.println("Added score for same level stress: " + $petId);
		insert(new PetStress($petId));
		update($helper);
end;

rule "Same mistery" //npr stresan posao
	agenda-group "user-personality"
	//salience 1
	when
		$u: SinglPerson( id == id, $loveMystery: loveMystery )
		$pet: Pet($petId : id, loveMystery == $loveMystery )
		//$compatiblePet: PetCompatibility( petId == $petId )
		not ( PetMistery(petId == $petId) )
		$helper: Helper()
	then
		$helper.setText("3");
		System.out.println("Added score for same level stress: " + $petId);
		insert(new PetMistery($petId));
		update($helper);
end;


rule "Same meditation" //npr stresan posao
	agenda-group "user-personality"
	//salience 1
	when
		$u: SinglPerson( id == id, $loveMeditation: loveMeditation )
		$pet: Pet($petId : id, loveMeditation == $loveMeditation )
		not ( PetMeditation(petId == $petId) )
		$helper: Helper()
	then
		$helper.setText("4");
		System.out.println("Added score for same level stress: " + $petId);
		insert(new PetMeditation($petId));
		update($helper);
end;

rule "Same level of patience" //npr stresan posao
	agenda-group "user-personality"
	//salience 1
	when
		$u: SinglPerson( id == id, $levelOfPatience: levelOfPatience )
		$pet: Pet($petId : id, levelOfPatience == $levelOfPatience )
		not ( PetPatience(petId == $petId) )
		$helper: Helper()
	then
		$helper.setText("5");
		System.out.println("Added score for same level stress: " + $petId);
		insert(new PetPatience($petId));
		update($helper);
end;

rule "Same level of persistance" //npr stresan posao
	agenda-group "user-personality"
	//salience 1
	when
		$u: SinglPerson( id == id, $levelOfPersistance: levelOfPersistance )
		$pet: Pet($petId : id, levelOfPersistance == $levelOfPersistance )
		not ( PetPersistance(petId == $petId) )
		$helper: Helper()
	then
		$helper.setText("6");
		System.out.println("Added score for same level stress: " + $petId);
		insert(new PetPersistance($petId));
		update($helper);
end;

rule "Same type" 
	agenda-group "user-personality"
	//salience 1
	when
		$u: SinglPerson( id == id, $extroversion: extroversion )
		$pet: Pet($petId : id, extroversion == $extroversion )
		not ( PetExtroversion(petId == $petId) )
		$helper: Helper()
	then
		$helper.setText("7");
		System.out.println("Added score for same level stress: " + $petId);
		insert(new PetExtroversion($petId));
		update($helper);
end;

rule "Same type2" //npr stresan posao
	agenda-group "user-personality"
	//salience 1
	when
		$u: SinglPerson( id == id, $introversion: introversion )
		$pet: Pet($petId : id, introversion == $introversion )
		not ( PetIntroversion(petId == $petId) )
		$helper: Helper()
	then
		$helper.setText("8");
		System.out.println("Added score for same level stress: " + $petId);
		insert(new PetIntroversion($petId));
		update($helper);
end; 

 

rule "Same activity" //npr stresan posao
	agenda-group "user-activity"
	//salience 1
	when
		$u: SinglPerson( id == id, $loveRunning: loveRunning, $loveWalking : loveWalking )
		$pet: Pet($petId : id)
		not ( PetActivity(petId == $petId) )
		$helper: Helper()
	then
		$helper.setText("9");
		System.out.println("Added score for same level stress: " + $petId);
		insert(new PetActivity($petId));
		update($helper);
end;


rule "Same price" //npr stresan posao
	agenda-group "user-personality"
	//salience 1
	when
		$u: SinglPerson( id == id, $price: price )
		$pet: Pet($petId : id, price == $price )
		not ( PetPrice(petId == $petId) )
		$helper: Helper()
	then
		$helper.setText("price");
		System.out.println("Added score for same level stress: " + $petId);
		insert(new PetPrice($petId));
		update($helper);
end; 

rule "Same time" //npr stresan posao
	agenda-group "user-personality"
	//salience 1
	when
		$u: SinglPerson( id == id, $hoursPerWeek: hoursPerWeek )
		$pet: Pet($petId : id, hoursPerWeek == $hoursPerWeek )
		not ( PetTime(petId == $petId) )
		$helper: Helper()
	then
		$helper.setText("8");
		System.out.println("Added score for same level stress: " + $petId);
		insert(new PetTime($petId));
		update($helper);
end; 

rule "Same place for living" //npr stresan posao
	agenda-group "user-personality"
	//salience 1
	when
		$u: SinglPerson( id == id, $placeForLiving: placeForLiving )
		$pet: Pet($petId : id, placeForLiving == $placeForLiving )
		not ( PetPlaceForLiving(petId == $petId) )
		$helper: Helper()
	then
		$helper.setText("place");
		System.out.println("Added score for same level stress: " + $petId);
		insert(new PetPlaceForLiving($petId));
		update($helper);
end;


